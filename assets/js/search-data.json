{
  
    
        "post0": {
            "title": "Title",
            "content": "title: Coupled van der Pol oscillators . description: . date: 2020-04-30 . tags: . math | . layout: layouts/post.njk . Coupled van der Pol oscillators https://scholarsarchive.library.albany.edu/cgi/viewcontent.cgi?article=1004&amp;context=honorscollege_physics . $ g&#39; = A sin ωt − γg − ω^2_0 z$ . $z&#39; = g$ . from models.coupled.vanderpol import * hv.notebook_extension() van=get_plot() . &lt;/img&gt; &lt;/img&gt; &lt;/img&gt; &lt;/img&gt; van[0] . A1: omega1: c: d: van . A1: omega1: c: d: import numpy as np from holoviews import HoloMap, VectorField %load_ext holoviews.ipython %output filename=&quot;Image-Pattern-Gaussian&quot; holomap=&quot;gif&quot; holomap = HoloMap() steps = np.linspace(-2.5, 2.5, 41) x,y = np.meshgrid(steps, steps) sine_rings = np.sin(x**2+y**2)*np.pi+np.pi exp_falloff = 1/np.exp((x**2+y**2)/15) for deg in np.linspace(0, 360, 128, endpoint=False): vector_data = np.array([x.flatten()/5., y.flatten()/5., np.sin(deg*2*np.pi/360)*sine_rings.flatten(), exp_falloff.flatten()]).T holomap[deg] = VectorField(vector_data, group=&#39;Sine Ring&#39;) holomap . &lt;/img&gt; &lt;/img&gt; import panel as pn pn.extension(&#39;vega&#39;) #This example demonstrates how to link Panel widgets to a Vega pane by editing the Vega spec using callbacks and triggering updates in the plot. imdb = { &quot;$schema&quot;: &quot;https://vega.github.io/schema/vega-lite/v3.json&quot;, &quot;data&quot;: {&quot;url&quot;: &quot;https://raw.githubusercontent.com/vega/vega/master/docs/data/movies.json&quot;}, &quot;transform&quot;: [{ &quot;filter&quot;: {&quot;and&quot;: [ {&quot;field&quot;: &quot;IMDB_Rating&quot;, &quot;valid&quot;: True}, {&quot;field&quot;: &quot;Rotten_Tomatoes_Rating&quot;, &quot;valid&quot;: True} ]} }], &quot;mark&quot;: &quot;rect&quot;, &quot;width&quot;: 600, &quot;height&quot;: 400, &quot;encoding&quot;: { &quot;x&quot;: { &quot;bin&quot;: {&quot;maxbins&quot;:60}, &quot;field&quot;: &quot;IMDB_Rating&quot;, &quot;type&quot;: &quot;quantitative&quot; }, &quot;y&quot;: { &quot;bin&quot;: {&quot;maxbins&quot;: 40}, &quot;field&quot;: &quot;Rotten_Tomatoes_Rating&quot;, &quot;type&quot;: &quot;quantitative&quot; }, &quot;color&quot;: { &quot;aggregate&quot;: &quot;count&quot;, &quot;type&quot;: &quot;quantitative&quot; } }, &quot;config&quot;: { &quot;view&quot;: { &quot;stroke&quot;: &quot;transparent&quot; } } } vega = pn.pane.Vega(imdb, width=750, height=425) # Declare range slider to adjust the color limits color_lims = pn.widgets.RangeSlider(name=&#39;Color limits&#39;, start=0, end=125, value=(0, 40), step=1) color_lims.jslink(vega, code={&#39;value&#39;: &quot;&quot;&quot; target.data.encoding.color.scale = {domain: source.value}; target.properties.data.change.emit() &quot;&quot;&quot;}) # Declare slider to control the number of bins along the x-axis imdb_bins = pn.widgets.IntSlider(name=&#39;IMDB Ratings Bins&#39;, start=0, end=125, value=60, step=25) imdb_bins.jslink(vega, code={&#39;value&#39;: &quot;&quot;&quot; target.data.encoding.x.bin.maxbins = source.value; target.properties.data.change.emit() &quot;&quot;&quot;}) # Declare slider to control the number of bins along the y-axis tomato_bins = pn.widgets.IntSlider(name=&#39;Rotten Tomato Ratings Bins&#39;, start=0, end=125, value=40, step=25) tomato_bins.jslink(vega, code={&#39;value&#39;: &quot;&quot;&quot; target.data.encoding.y.bin.maxbins = source.value; target.properties.data.change.emit() &quot;&quot;&quot;}) pn.Row(vega, pn.Column(color_lims, imdb_bins, tomato_bins)) . #import holoviews as hv #hv.renderer(&#39;matplotlib&#39;).save(van[0], &#39;test&#39;, fmt=&#39;gif&#39;) . #%output filename=&quot;tmp&quot; holomap=&#39;gif&#39; #van[0] . Error: Format &#39;gif&#39; does not appear to be supported. For help with the %output magic, call %output? . A1: omega1: c: d: ω0 = 2500 ν = 100 µ = 10 ω2 = 300*25#554.365 A2=0 def deriv (y,t,A1,ω1): sine1=A1*np.sin(ω1 * t) sine2=A1*np.sin(ω2 *t) zprime = y[1] gprime = -ν *y[1]*(y[0]**2 - µ) - (ω0**2) * y[0] + sine1 + sine2 return np.array([ zprime , gprime, sine1 ]) plt.figure() y = odeint(deriv, [0.1,0.1,0.], np.linspace(0, 1., 600000),args=(5e6, 2200)) # with w0=2500, get resonance or beating plot_and_play(y) . /home/m/anaconda3/envs/tf/lib/python3.6/site-packages/ipykernel_launcher.py:45: UserWarning: No sound . plt.figure() y = odeint(deriv, [0.1,0.1,0.], np.linspace(0, 1., 600000),args=(5e6, 2200)) # with w0=2500, get resonance or beating plot_and_play(y) . pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html . /home/m/anaconda3/envs/tf/lib/python3.6/site-packages/ipykernel_launcher.py:106: UserWarning: No sound . import os name=&#39;vanderpol_coupled_standalone&#39; path=&#39;~/mmy/jup/models/&#39; os.system(f&#39;jupyter nbconvert {path}{name}.ipynb --to html --output {path}{name}&#39;) os.system(f&#39;jupyter nbconvert {path}{name}.ipynb --to markdown --output {path}{name}&#39;) . 256 .",
            "url": "https://mmyros.github.io/fastblog/2020/05/02/vanderpol_coupled_standalone_notebook.html",
            "relUrl": "/2020/05/02/vanderpol_coupled_standalone_notebook.html",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Reaction-diffusion",
            "content": "import numpy as np def laplacian(Z, dx): &quot;&quot;&quot; Function to computes the discrete Laplace operator of a 2D variable on the grid (using a five-point stencil finite difference method.) &quot;&quot;&quot; Ztop = Z[0:-2,1:-1] Zleft = Z[1:-1,0:-2] Zbottom = Z[2:,1:-1] Zright = Z[1:-1,2:] Zcenter = Z[1:-1,1:-1] return (Ztop + Zleft + Zbottom + Zright - 4 * Zcenter) / dx**2 #Now we can refactor the code from the original tutorial into a function that simulates the reaction-diffusion process. Note that this version uses a coarser time-step and returns copies of the reaction state over time as a list of (time, np.array) tuples: def reaction_diffusion(a=2.8e-4, b=5e-3, tau=0.1, k=-0.005, samples=10): &quot;&quot;&quot; We simulate the PDE with the finite difference method. The samples value is the number of equally spaced samples to collect over the total simulation time T. &quot;&quot;&quot; size = 100 # size of the 2D grid dx = 2./size # space step T = 10.0 # total time dt = 4.5 * dx**2 # simulation time step n = int(T/dt) result = [] U = np.random.rand(size, size) V = np.random.rand(size, size) sample_times = [int(el) for el in np.linspace(0, n, samples)] for i in range(n): # We compute the Laplacian of u and v. deltaU = laplacian(U, dx=dx) deltaV = laplacian(V, dx=dx) # We take the values of u and v inside the grid. Uc = U[1:-1,1:-1] Vc = V[1:-1,1:-1] # We update the variables. U[1:-1,1:-1], V[1:-1,1:-1] = Uc + dt * (a * deltaU + Uc - Uc**3 - Vc + k), Vc + dt * (b * deltaV + Uc - Vc) / tau # Neumann conditions: derivatives at the edges # are null. for Z in (U, V): Z[0,:] = Z[1,:] Z[-1,:] = Z[-2,:] Z[:,0] = Z[:,1] Z[:,-1] = Z[:,-2] if i in sample_times: result.append((i * dt,U.copy())) return result . The array U represents the concentration of some compound involved in pigmentation, whereas the V array represents some other substance that reacts with the first compound to impede pigmentation. The partial differential equation for the evolution of these two compounds over time may be described by these two coupled equations: . $ ∂u∂t=aΔu+u−u3−v+k $ . $ τ∂v∂t=bΔv+u−v $ . Visualizing the simulation with HoloViews The code above is a fairly direct translation of the original recipe except we now collect the simulation results over time as numpy arrays instead of simply mutating the U array until the final state is reached. . To visualize the results of the simulation using the default parameter, we first load the ipython extension and import the HoloMap and Image classes: . import holoviews as hv hv.notebook_extension() sim1 = reaction_diffusion() #Using a HoloMap of Image elements, we can view the evolution of our reaction-diffusion process over time (using the &#39;copper&#39; color map). All we need to do is built a dictionary of Image elements indexed over time and pass it to the HoloMap where we declare the key dimension as &#39;Time&#39;: . &lt;/img&gt; &lt;/img&gt; %%opts Image (cmap=&#39;copper&#39;) hv.HoloMap({time: hv.Image(array) for (time, array) in sim1}, kdims=[&#39;Time&#39;]) . Time: Logistic map and chaos . http://examples.holoviews.org/Logistic_Map.html . import numpy as np import holoviews as hv from holoviews import Dimension hv.notebook_extension() #The Logistic Model #Here we define a very simple logistic_map function that is defined by the difference equation xt+1=rxt(1−xt) . This is the logistic map, a very simple model of population dynamics with chaotic behavior: def logistic_map(gens=20, init=0.5, growth=0.5): population = [init] for gen in range(gens-1): current = population[gen] population.append(current * growth * (1 - current)) return population . hv.Points.kdims = [hv.Dimension(&#39;Growth rate&#39;, soft_range=(0,4)), hv.Dimension(&#39;Population&#39;, soft_range=(0,1))] hv.HoloMap({(gens,cutoff): hv.Points([(rate, pop) for rate in np.linspace(0, 4, 1000) for (gen, pop) in enumerate(logistic_map(gens=gens, growth=rate)) if gen&gt;=cutoff]) for gens in [20,40,60,80,100] for cutoff in [1,5,10,15]}, kdims=[&#39;Generations&#39;, &#39;Cutoff&#39;]) . Generations: Cutoff:",
            "url": "https://mmyros.github.io/fastblog/2020/05/02/_holoviews.html",
            "relUrl": "/2020/05/02/_holoviews.html",
            "date": " • May 2, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Vanderpol_coupled_standalone",
            "content": "title: Coupled van der Pol oscillators . description: . date: 2020-04-30 . tags: . math | . layout: layouts/post.njk . Coupled van der Pol oscillators https://scholarsarchive.library.albany.edu/cgi/viewcontent.cgi?article=1004&amp;context=honorscollege_physics . $ g’ = A sin ωt − γg − ω^2_0 z$ . $z’ = g$ . from models.coupled.vanderpol import * hv.notebook_extension() van=get_plot() . &lt;/img&gt; &lt;/img&gt; van[0] . A1: omega1: c: d: van . A1: omega1: c: d: ω0 = 2500 ν = 100 µ = 10 ω2 = 300*25#554.365 A2=0 def deriv (y,t,A1,ω1): sine1=A1*np.sin(ω1 * t) sine2=A1*np.sin(ω2 *t) zprime = y[1] gprime = -ν *y[1]*(y[0]**2 - µ) - (ω0**2) * y[0] + sine1 + sine2 return np.array([ zprime , gprime, sine1 ]) plt.figure() y = odeint(deriv, [0.1,0.1,0.], np.linspace(0, 1., 600000),args=(5e6, 2200)) # with w0=2500, get resonance or beating plot_and_play(y) . &lt;IPython.core.display.Javascript object&gt; . . /home/m/anaconda3/envs/tf/lib/python3.6/site-packages/ipykernel_launcher.py:45: UserWarning: No sound . plt.figure() y = odeint(deriv, [0.1,0.1,0.], np.linspace(0, 1., 600000),args=(5e6, 2200)) # with w0=2500, get resonance or beating plot_and_play(y) . &lt;IPython.core.display.Javascript object&gt; . . pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html /home/m/anaconda3/envs/tf/lib/python3.6/site-packages/ipykernel_launcher.py:106: UserWarning: No sound . import os name=&#39;vanderpol_coupled_standalone&#39; path=&#39;~/mmy/jup/models/&#39; os.system(f&#39;jupyter nbconvert {path}{name}.ipynb --to markdown --output {path}{name}&#39;) os.system(f&#39;jupyter nbconvert {path}{name}.ipynb --to markdown --output {path}{name}&#39;) . 0 .",
            "url": "https://mmyros.github.io/fastblog/2020/05/01/vanderpol_coupled_standalone.html",
            "relUrl": "/2020/05/01/vanderpol_coupled_standalone.html",
            "date": " • May 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Vanderpol_coupled_standalonehtml",
            "content": "&lt;!DOCTYPE html&gt; . vanderpol_coupled_standalone . title: Coupled van der Pol oscillators . description: . date: 2020-04-30 . tags: . math | . layout: layouts/post.njk . Coupled van der Pol oscillators https://scholarsarchive.library.albany.edu/cgi/viewcontent.cgi?article=1004&amp;context=honorscollege_physics . $ g&#39; = A sin ωt − γg − ω^2_0 z$ . $z&#39; = g$ . In&nbsp;[1]: from models.coupled.vanderpol import * hv.notebook_extension() van=get_plot() . &lt;/img&gt; &lt;/img&gt; In&nbsp;[2]: van[0] . Out[2]: A1: omega1: c: d: In&nbsp;[3]: van . Out[3]: A1: omega1: c: d: In&nbsp;[125]: ω0 = 2500 ν = 100 µ = 10 ω2 = 300*25#554.365 A2=0 def deriv (y,t,A1,ω1): sine1=A1*np.sin(ω1 * t) sine2=A1*np.sin(ω2 *t) zprime = y[1] gprime = -ν *y[1]*(y[0]**2 - µ) - (ω0**2) * y[0] + sine1 + sine2 return np.array([ zprime , gprime, sine1 ]) plt.figure() y = odeint(deriv, [0.1,0.1,0.], np.linspace(0, 1., 600000),args=(5e6, 2200)) # with w0=2500, get resonance or beating plot_and_play(y) . /home/m/anaconda3/envs/tf/lib/python3.6/site-packages/ipykernel_launcher.py:45: UserWarning: No sound . In&nbsp;[42]: plt.figure() y = odeint(deriv, [0.1,0.1,0.], np.linspace(0, 1., 600000),args=(5e6, 2200)) # with w0=2500, get resonance or beating plot_and_play(y) . pygame 1.9.6 Hello from the pygame community. https://www.pygame.org/contribute.html . /home/m/anaconda3/envs/tf/lib/python3.6/site-packages/ipykernel_launcher.py:106: UserWarning: No sound . In&nbsp;[4]: import os name=&#39;vanderpol_coupled_standalone&#39; path=&#39;~/mmy/jup/models/&#39; os.system(f&#39;jupyter nbconvert {path}{name}.ipynb --to markdown --output {path}{name}&#39;) os.system(f&#39;jupyter nbconvert {path}{name}.ipynb --to markdown --output {path}{name}&#39;) . Out[4]: 0 . .",
            "url": "https://mmyros.github.io/fastblog/2020/04/29/vanderpol_coupled_standalonehtml.html",
            "relUrl": "/2020/04/29/vanderpol_coupled_standalonehtml.html",
            "date": " • Apr 29, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": "import altair as alt from vega_datasets import data source = data.seattle_weather() scale = alt.Scale(domain=[&#39;sun&#39;, &#39;fog&#39;, &#39;drizzle&#39;, &#39;rain&#39;, &#39;snow&#39;], range=[&#39;#e7ba52&#39;, &#39;#a7a7a7&#39;, &#39;#aec7e8&#39;, &#39;#1f77b4&#39;, &#39;#9467bd&#39;]) color = alt.Color(&#39;weather:N&#39;, scale=scale) # We create two selections: # - a brush that is active on the top panel # - a multi-click that is active on the bottom panel brush = alt.selection_interval(encodings=[&#39;x&#39;]) click = alt.selection_multi(encodings=[&#39;color&#39;]) # Top panel is scatter plot of temperature vs time points = alt.Chart().mark_point().encode( alt.X(&#39;monthdate(date):T&#39;, title=&#39;Date&#39;), alt.Y(&#39;temp_max:Q&#39;, title=&#39;Maximum Daily Temperature (C)&#39;, scale=alt.Scale(domain=[-5, 40]) ), color=alt.condition(brush, color, alt.value(&#39;lightgray&#39;)), size=alt.Size(&#39;precipitation:Q&#39;, scale=alt.Scale(range=[5, 200])) ).properties( width=550, height=300 ).add_selection( brush ).transform_filter( click ) # Bottom panel is a bar chart of weather type bars = alt.Chart().mark_bar().encode( x=&#39;count()&#39;, y=&#39;weather:N&#39;, color=alt.condition(click, color, alt.value(&#39;lightgray&#39;)), ).transform_filter( brush ).properties( width=550, ).add_selection( click ) alt.vconcat( points, bars, data=source, title=&quot;Seattle Weather: 2012-2015&quot; ) . import time import altair as alt import pandas as pd import ipywidgets as widgets from ipywidgets import interact source = pd.DataFrame({ &#39;a&#39;: [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;, &#39;G&#39;, &#39;H&#39;, &#39;I&#39;], &#39;b&#39;: [28, 55, 43, 91, 81, 53, 19, 87, 52] }) def demo(i): return alt.Chart(source.sample(frac=.4)).mark_bar().encode( x=&#39;a&#39;, y=&#39;b&#39; ) interact(demo, i = widgets.Play( value=0, min=0, max=10, step=1, description=&quot;Press play&quot;, disabled=False)); .",
            "url": "https://mmyros.github.io/fastblog/2020/04/28/test_widgets.html",
            "relUrl": "/2020/04/28/test_widgets.html",
            "date": " • Apr 28, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://mmyros.github.io/fastblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "My test",
            "content": "This is my test post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://mmyros.github.io/fastblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://mmyros.github.io/fastblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "",
          "content": "Maxym Myroshnychenko NIH/NINDS .",
          "url": "https://mmyros.github.io/fastblog/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mmyros.github.io/fastblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}